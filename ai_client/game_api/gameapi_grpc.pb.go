// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: gameapi.proto

package game_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameApi_RegisterPlayer_FullMethodName   = "/game_api.GameApi/registerPlayer"
	GameApi_GetPossibleMoves_FullMethodName = "/game_api.GameApi/getPossibleMoves"
	GameApi_GetCurrentBoard_FullMethodName  = "/game_api.GameApi/getCurrentBoard"
	GameApi_CanMove_FullMethodName          = "/game_api.GameApi/canMove"
	GameApi_Move_FullMethodName             = "/game_api.GameApi/move"
	GameApi_KeepAlive_FullMethodName        = "/game_api.GameApi/keepAlive"
)

// GameApiClient is the client API for GameApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameApiClient interface {
	RegisterPlayer(ctx context.Context, in *PlayerNameRequest, opts ...grpc.CallOption) (*RegisterPlayerResponse, error)
	GetPossibleMoves(ctx context.Context, in *GetPossibleMovesRequest, opts ...grpc.CallOption) (*GetPossibleMovesResponse, error)
	GetCurrentBoard(ctx context.Context, in *GetCurrentBoardRequest, opts ...grpc.CallOption) (*GetCurrentBoardResponse, error)
	CanMove(ctx context.Context, in *PlayerNameRequest, opts ...grpc.CallOption) (*CanMoveResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	KeepAlive(ctx context.Context, in *PlayerNameRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
}

type gameApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGameApiClient(cc grpc.ClientConnInterface) GameApiClient {
	return &gameApiClient{cc}
}

func (c *gameApiClient) RegisterPlayer(ctx context.Context, in *PlayerNameRequest, opts ...grpc.CallOption) (*RegisterPlayerResponse, error) {
	out := new(RegisterPlayerResponse)
	err := c.cc.Invoke(ctx, GameApi_RegisterPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) GetPossibleMoves(ctx context.Context, in *GetPossibleMovesRequest, opts ...grpc.CallOption) (*GetPossibleMovesResponse, error) {
	out := new(GetPossibleMovesResponse)
	err := c.cc.Invoke(ctx, GameApi_GetPossibleMoves_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) GetCurrentBoard(ctx context.Context, in *GetCurrentBoardRequest, opts ...grpc.CallOption) (*GetCurrentBoardResponse, error) {
	out := new(GetCurrentBoardResponse)
	err := c.cc.Invoke(ctx, GameApi_GetCurrentBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) CanMove(ctx context.Context, in *PlayerNameRequest, opts ...grpc.CallOption) (*CanMoveResponse, error) {
	out := new(CanMoveResponse)
	err := c.cc.Invoke(ctx, GameApi_CanMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, GameApi_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) KeepAlive(ctx context.Context, in *PlayerNameRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, GameApi_KeepAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameApiServer is the server API for GameApi service.
// All implementations must embed UnimplementedGameApiServer
// for forward compatibility
type GameApiServer interface {
	RegisterPlayer(context.Context, *PlayerNameRequest) (*RegisterPlayerResponse, error)
	GetPossibleMoves(context.Context, *GetPossibleMovesRequest) (*GetPossibleMovesResponse, error)
	GetCurrentBoard(context.Context, *GetCurrentBoardRequest) (*GetCurrentBoardResponse, error)
	CanMove(context.Context, *PlayerNameRequest) (*CanMoveResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	KeepAlive(context.Context, *PlayerNameRequest) (*KeepAliveResponse, error)
	mustEmbedUnimplementedGameApiServer()
}

// UnimplementedGameApiServer must be embedded to have forward compatible implementations.
type UnimplementedGameApiServer struct {
}

func (UnimplementedGameApiServer) RegisterPlayer(context.Context, *PlayerNameRequest) (*RegisterPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlayer not implemented")
}
func (UnimplementedGameApiServer) GetPossibleMoves(context.Context, *GetPossibleMovesRequest) (*GetPossibleMovesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPossibleMoves not implemented")
}
func (UnimplementedGameApiServer) GetCurrentBoard(context.Context, *GetCurrentBoardRequest) (*GetCurrentBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBoard not implemented")
}
func (UnimplementedGameApiServer) CanMove(context.Context, *PlayerNameRequest) (*CanMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanMove not implemented")
}
func (UnimplementedGameApiServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedGameApiServer) KeepAlive(context.Context, *PlayerNameRequest) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedGameApiServer) mustEmbedUnimplementedGameApiServer() {}

// UnsafeGameApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameApiServer will
// result in compilation errors.
type UnsafeGameApiServer interface {
	mustEmbedUnimplementedGameApiServer()
}

func RegisterGameApiServer(s grpc.ServiceRegistrar, srv GameApiServer) {
	s.RegisterService(&GameApi_ServiceDesc, srv)
}

func _GameApi_RegisterPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).RegisterPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApi_RegisterPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).RegisterPlayer(ctx, req.(*PlayerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_GetPossibleMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPossibleMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).GetPossibleMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApi_GetPossibleMoves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).GetPossibleMoves(ctx, req.(*GetPossibleMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_GetCurrentBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).GetCurrentBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApi_GetCurrentBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).GetCurrentBoard(ctx, req.(*GetCurrentBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_CanMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).CanMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApi_CanMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).CanMove(ctx, req.(*PlayerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApi_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameApi_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).KeepAlive(ctx, req.(*PlayerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameApi_ServiceDesc is the grpc.ServiceDesc for GameApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_api.GameApi",
	HandlerType: (*GameApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerPlayer",
			Handler:    _GameApi_RegisterPlayer_Handler,
		},
		{
			MethodName: "getPossibleMoves",
			Handler:    _GameApi_GetPossibleMoves_Handler,
		},
		{
			MethodName: "getCurrentBoard",
			Handler:    _GameApi_GetCurrentBoard_Handler,
		},
		{
			MethodName: "canMove",
			Handler:    _GameApi_CanMove_Handler,
		},
		{
			MethodName: "move",
			Handler:    _GameApi_Move_Handler,
		},
		{
			MethodName: "keepAlive",
			Handler:    _GameApi_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gameapi.proto",
}
